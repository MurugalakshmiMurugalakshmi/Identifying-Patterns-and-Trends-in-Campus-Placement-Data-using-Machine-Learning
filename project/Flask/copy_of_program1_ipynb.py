# -*- coding: utf-8 -*-
"""Copy of Program1. ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D8gYGRzWPw8g0ZLUi7ah8l3mUAT2n2Bw
"""

df = pd.read_csv(r"/content/sample_data/collegePlace.csv")
df.head()

import numpy as np
import pandas as pd

import os



import seaborn as sns 
import matplotlib.pyplot as plt

from sklearn import svm

from sklearn.metrics import accuracy_score

from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics

from sklearn.model_selection import cross_val_score

from sklearn import preprocessing

from sklearn.model_selection import train_test_split

from sklearn.preprocessing import StandardScaler
import joblib

from sklearn.metrics import accuracy_score

df.info()

df.isnull().sum()

def transformationplot(feature):
    plt.figure(figsize=(12,5))
    plt.subplot(1,2,1)
    sns.distplot(feature)
transformationplot(np.log(df['Age']))

df = df.replace(['Male'],[0])
df = df.replace(['Female'],[1])

df = df.replace(['Computer Science','Information Technology','Electronics And Communication','Mechanical','Electrical','Civil'],
                [0,1,2,3,4,5])

df = df.drop(['Hostel'],axis=1)

df

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['CGPA'],color='r')

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['PlacedOrNot'],color='r')

#plotting the count plot
plt.figure(figsize=(18,4))
plt.subplot(1,4,1)
sns.countplot(df['Gender'])
plt.subplot(1,4,2)
sns.countplot(df['CGPA'])
plt.show()

plt.figure(figsize=(20,5))
plt.subplot(131)
sns.countplot(df["PlacedOrNot"])

sns.swarmplot(df['PlacedOrNot'],df['CGPA'],hue=df['Stream'])

sc=StandardScaler()
x_bal=sc.fit_transform(x_bal)

x_bal = pd.DataFrame(x_bal,columns=names)

X = standardized_data
Y = df['PlacedOrNot']

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

SVC(kernel='linear')

X_train_predicion = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('accuracy score of the training data:',training_data_accuracy)

Accuracy score of the training data: 0.7685497470489039

best_k = {"Regular":0}
best_store = {"Regular:0"}
for k in range(3,50,2):
   ## Using Regular training set
   knn_temp = KNeigborsClassifier(n_neighbors=k)
   knn_temp.fit(X_train, Y_train)
   knn_temp_pred = knn_temp.predict(X_test)
   score = metrics.accuracy_score(Ytest, knn_temp_pred) * 100
   if score >=best_score["Regular"]and score <100: 
      best_score["Regular"] = score
      best_k["Regular"] = k